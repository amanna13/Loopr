import * as anchor from "@coral-xyz/anchor";import { PublicKey, Keypair, SystemProgram } from "@solana/web3.js";import { Program } from "@coral-xyz/anchor";import { LooprSubscription } from "../target/types/loopr_subscription";async function initialize() {  console.log("üöÄ Initializing Loopr Backend...");  // Configure the client to use the local cluster  const provider = anchor.AnchorProvider.env();  anchor.setProvider(provider);  const program = anchor.workspace.LooprSubscription as Program<LooprSubscription>;    // Get the authority (deployer)  const authority = provider.wallet.publicKey;  console.log("Authority:", authority.toString());  // Derive global state PDA  const [globalStatePda, bump] = PublicKey.findProgramAddressSync(    [Buffer.from("global_state")],    program.programId  );  try {    // Check if global state already exists    const existingState = await program.account.globalState.fetch(globalStatePda);    console.log("‚úÖ Global state already initialized");    console.log("Total plans:", existingState.totalPlans.toString());    console.log("Total subscriptions:", existingState.totalSubscriptions.toString());    return;  } catch (error) {    // Global state doesn't exist, initialize it    console.log("üìù Initializing global state...");  }  try {    const tx = await program.methods      .initializeGlobalState()      .accounts({        globalState: globalStatePda,        authority: authority,        systemProgram: SystemProgram.programId,      })      .rpc();    console.log("‚úÖ Global state initialized!");    console.log("Transaction signature:", tx);    console.log("Global state PDA:", globalStatePda.toString());        // Fetch and display the initialized state    const globalState = await program.account.globalState.fetch(globalStatePda);    console.log("Authority:", globalState.authority.toString());    console.log("Total plans:", globalState.totalPlans.toString());    console.log("Total subscriptions:", globalState.totalSubscriptions.toString());    console.log("Is paused:", globalState.isPaused);  } catch (error) {    console.error("‚ùå Failed to initialize global state:", error);    process.exit(1);  }}// Run the initializationinitialize().then(() => {  console.log("üéâ Initialization complete!");  process.exit(0);}).catch((error) => {  console.error("‚ùå Initialization failed:", error);  process.exit(1);});