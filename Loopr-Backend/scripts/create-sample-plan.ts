import * as anchor from "@coral-xyz/anchor";import { PublicKey, SystemProgram, LAMPORTS_PER_SOL } from "@solana/web3.js";import { Program } from "@coral-xyz/anchor";import { LooprSubscription } from "../target/types/loopr_subscription";async function createSamplePlan() {  console.log("üì¶ Creating sample subscription plans...");  const provider = anchor.AnchorProvider.env();  anchor.setProvider(provider);  const program = anchor.workspace.LooprSubscription as Program<LooprSubscription>;  const authority = provider.wallet.publicKey;  // Sample plans to create  const plans = [    {      planId: "netflix-premium",      name: "Netflix Premium",      description: "Netflix Premium with 4K streaming and multiple screens",      price: 0.1 * LAMPORTS_PER_SOL, // 0.1 SOL per month      duration: 30 * 24 * 60 * 60, // 30 days      maxSubscribers: 1000    },    {      planId: "spotify-premium",      name: "Spotify Premium",      description: "Ad-free music streaming with offline downloads",      price: 0.05 * LAMPORTS_PER_SOL, // 0.05 SOL per month      duration: 30 * 24 * 60 * 60, // 30 days      maxSubscribers: 500    },    {      planId: "disney-plus",      name: "Disney Plus",      description: "Disney+ streaming with all Disney, Marvel, and Star Wars content",      price: 0.08 * LAMPORTS_PER_SOL, // 0.08 SOL per month      duration: 30 * 24 * 60 * 60, // 30 days      maxSubscribers: null // unlimited    }  ];  // Global state PDA  const [globalStatePda] = PublicKey.findProgramAddressSync(    [Buffer.from("global_state")],    program.programId  );  for (const plan of plans) {    console.log(`\nüìã Creating plan: ${plan.name}...`);    // Derive plan PDA    const [planPda] = PublicKey.findProgramAddressSync(      [Buffer.from("subscription_plan"), Buffer.from(plan.planId)],      program.programId    );    try {      // Check if plan already exists      const existingPlan = await program.account.subscriptionPlan.fetch(planPda);      console.log(`‚úÖ Plan "${plan.name}" already exists`);      continue;    } catch (error) {      // Plan doesn't exist, create it    }    try {      const tx = await program.methods        .initializeSubscriptionPlan(          plan.planId,          plan.name,          plan.description,          new anchor.BN(plan.price),          new anchor.BN(plan.duration),          plan.maxSubscribers        )        .accounts({          subscriptionPlan: planPda,          globalState: globalStatePda,          authority: authority,          systemProgram: SystemProgram.programId,        })        .rpc();      console.log(`‚úÖ Created plan: ${plan.name}`);      console.log(`   Plan ID: ${plan.planId}`);      console.log(`   Price: ${plan.price / LAMPORTS_PER_SOL} SOL`);      console.log(`   Duration: ${plan.duration / (24 * 60 * 60)} days`);      console.log(`   Transaction: ${tx}`);    } catch (error) {      console.error(`‚ùå Failed to create plan "${plan.name}":`, error);    }  }  // Create a sample payment intent for QR code testing  console.log("\nüîç Creating sample payment intent for QR testing...");    const intentId = "sample-intent-" + Date.now();  const [paymentIntentPda] = PublicKey.findProgramAddressSync(    [Buffer.from("payment_intent"), Buffer.from(intentId)],    program.programId  );  const [firstPlanPda] = PublicKey.findProgramAddressSync(    [Buffer.from("subscription_plan"), Buffer.from(plans[0].planId)],    program.programId  );  try {    const now = Math.floor(Date.now() / 1000);    const expiresAt = now + 3600; // 1 hour from now    const tx = await program.methods      .createPaymentIntent(        intentId,        plans[0].planId,        new anchor.BN(plans[0].price),        new anchor.BN(expiresAt)      )      .accounts({        paymentIntent: paymentIntentPda,        subscriptionPlan: firstPlanPda,        authority: authority,        globalState: globalStatePda,        systemProgram: SystemProgram.programId,      })      .rpc();    console.log(`‚úÖ Created sample payment intent`);    console.log(`   Intent ID: ${intentId}`);    console.log(`   Plan: ${plans[0].name}`);    console.log(`   Amount: ${plans[0].price / LAMPORTS_PER_SOL} SOL`);    console.log(`   Expires: ${new Date(expiresAt * 1000).toISOString()}`);    console.log(`   Transaction: ${tx}`);  } catch (error) {    console.error("‚ùå Failed to create payment intent:", error);  }}// Run the scriptcreateSamplePlan().then(() => {  console.log("\nüéâ Sample plans created successfully!");  process.exit(0);}).catch((error) => {  console.error("‚ùå Failed to create sample plans:", error);  process.exit(1);});