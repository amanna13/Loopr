import * as anchor from "@coral-xyz/anchor";import { Program } from "@coral-xyz/anchor";import { PublicKey, Keypair, SystemProgram, LAMPORTS_PER_SOL } from "@solana/web3.js";import { LooprSubscription } from "../target/types/loopr_subscription";import { expect } from "chai";describe("QR Code Payment Flow", () => {  const provider = anchor.AnchorProvider.env();  anchor.setProvider(provider);  const program = anchor.workspace.LooprSubscription as Program<LooprSubscription>;    let authority: Keypair;  let user: Keypair;  let globalStatePda: PublicKey;  let subscriptionPlanPda: PublicKey;  let paymentIntentPda: PublicKey;  let userSubscriptionPda: PublicKey;    const planId = "spotify-premium";  const intentId = "qr-intent-123";  const subscriptionId = "qr-sub-123";  const planPrice = 0.05 * LAMPORTS_PER_SOL; // 0.05 SOL  before(async () => {    authority = Keypair.generate();    user = Keypair.generate();    // Airdrop SOL    await provider.connection.requestAirdrop(authority.publicKey, 10 * LAMPORTS_PER_SOL);    await provider.connection.requestAirdrop(user.publicKey, 10 * LAMPORTS_PER_SOL);    // Derive PDAs    [globalStatePda] = PublicKey.findProgramAddressSync(      [Buffer.from("global_state")],      program.programId    );    [subscriptionPlanPda] = PublicKey.findProgramAddressSync(      [Buffer.from("subscription_plan"), Buffer.from(planId)],      program.programId    );    [paymentIntentPda] = PublicKey.findProgramAddressSync(      [Buffer.from("payment_intent"), Buffer.from(intentId)],      program.programId    );    [userSubscriptionPda] = PublicKey.findProgramAddressSync(      [Buffer.from("user_subscription"), user.publicKey.toBuffer(), Buffer.from(subscriptionId)],      program.programId    );  });  it("Complete QR payment flow", async () => {    // 1. Initialize global state    try {      await program.methods        .initializeGlobalState()        .accounts({          globalState: globalStatePda,          authority: authority.publicKey,          systemProgram: SystemProgram.programId,        })        .signers([authority])        .rpc();    } catch (error) {      console.log("Global state already initialized");    }    // 2. Create subscription plan    await program.methods      .initializeSubscriptionPlan(        planId,        "Spotify Premium",        "Premium music streaming",        new anchor.BN(planPrice),        new anchor.BN(30 * 24 * 60 * 60), // 30 days        null // unlimited subscribers      )      .accounts({        subscriptionPlan: subscriptionPlanPda,        globalState: globalStatePda,        authority: authority.publicKey,        systemProgram: SystemProgram.programId,      })      .signers([authority])      .rpc();    // 3. Create payment intent (QR code generation)    const now = Math.floor(Date.now() / 1000);    const expiresAt = now + 3600; // 1 hour    await program.methods      .createPaymentIntent(        intentId,        planId,        new anchor.BN(planPrice),        new anchor.BN(expiresAt)      )      .accounts({        paymentIntent: paymentIntentPda,        subscriptionPlan: subscriptionPlanPda,        authority: authority.publicKey,        globalState: globalStatePda,        systemProgram: SystemProgram.programId,      })      .signers([authority])      .rpc();    // 4. User scans QR and subscribes + pays    await program.methods      .subscribeAndPay(subscriptionId)      .accounts({        paymentIntent: paymentIntentPda,        subscriptionPlan: subscriptionPlanPda,        userSubscription: userSubscriptionPda,        user: user.publicKey,        authority: authority.publicKey,        globalState: globalStatePda,        systemProgram: SystemProgram.programId,      })      .signers([user, authority])      .rpc();    // 5. Verify payment intent is completed    const intent = await program.account.paymentIntent.fetch(paymentIntentPda);    expect(intent.status).to.deep.equal({ completed: {} });    expect(intent.payer?.toString()).to.equal(user.publicKey.toString());    // 6. Verify subscription is created and active    const subscription = await program.account.userSubscription.fetch(userSubscriptionPda);    expect(subscription.isActive).to.be.true;    expect(subscription.autoPayEnabled).to.be.true;    expect(subscription.user.toString()).to.equal(user.publicKey.toString());    console.log("âœ… QR payment flow completed successfully!");  });});